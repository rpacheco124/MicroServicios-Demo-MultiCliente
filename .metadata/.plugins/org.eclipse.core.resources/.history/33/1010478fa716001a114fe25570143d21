package pe.rpacheco.msdemorest.config;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.sql.DataSource;

import org.hibernate.cfg.Environment;
import org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl;
import org.hibernate.engine.jdbc.connections.spi.AbstractMultiTenantConnectionProvider;
import org.hibernate.engine.jdbc.connections.spi.ConnectionProvider;

public class MultiTenantConnectionProvider extends AbstractMultiTenantConnectionProvider {
	 
    public static final MultiTenantConnectionProvider INSTANCE =
            new MultiTenantConnectionProvider();
 
    private final Map<String, ConnectionProvider> connectionProviderMap =
            new HashMap<>();
 
    Map<String, ConnectionProvider> getConnectionProviderMap() {
        return connectionProviderMap;
    }
    
	@Override
	protected ConnectionProvider getAnyConnectionProvider() {
        return connectionProviderMap.get(
                TenantContext.DEFAULT_TENANT_IDENTIFIER
            );
	}

	@Override
	protected ConnectionProvider selectConnectionProvider(String tenantIdentifier) {
        return connectionProviderMap.get(
                tenantIdentifier
            );
	}
	
	private void addTenantConnectionProvider(
	        String tenantId,
	        DataSource tenantDataSource,
	        Properties properties) {
	         
	    DatasourceConnectionProviderImpl connectionProvider =
	        new DatasourceConnectionProviderImpl();
	    connectionProvider.setDataSource(tenantDataSource);
	    connectionProvider.configure(properties);
	     
	    MultiTenantConnectionProvider.INSTANCE
	    .getConnectionProviderMap()
	    .put(
	        tenantId,
	        connectionProvider
	    );
	}
	
	private void addTenantConnectionProvider(
	        String tenantId) {
	 
	    PGSimpleDataSource defaultDataSource = (PGSimpleDataSource) database()
	    .dataSourceProvider()
	    .dataSource();
	 
	    Properties properties = properties();
	 
	    PGSimpleDataSource tenantDataSource = new PGSimpleDataSource();
	    tenantDataSource.setDatabaseName(defaultDataSource.getDatabaseName());
	    tenantDataSource.setCurrentSchema(tenantId);
	    tenantDataSource.setServerName(defaultDataSource.getServerName());
	    tenantDataSource.setUser(defaultDataSource.getUser());
	    tenantDataSource.setPassword(defaultDataSource.getPassword());
	 
	    properties.put(
	        Environment.DATASOURCE,
	        dataSourceProxyType().dataSource(tenantDataSource)
	    );
	 
	    addTenantConnectionProvider(tenantId, tenantDataSource, properties);
	}


}
